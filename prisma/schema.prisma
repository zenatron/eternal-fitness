generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  age Int?
  gender String?
  height Float?
  weight Float?
  useMetric Boolean @default(false)
  completedWorkouts Workout[]
  points Int @default(0)
  
  // Dashboard related fields
  userStats UserStats?
  monthlyStats MonthlyStats[]
  weightGoal Float? // Target weight goal in kg or lbs (based on useMetric)
}

model Workout {
  id            String    @id @default(uuid())
  name          String
  description   String?
  duration      Int?      // Total duration in minutes
  scheduledDate DateTime? // When the workout is planned for
  completed     Boolean   @default(false)
  completedAt   DateTime? // When the workout was completed
  notes         String?   // General workout notes
  favorite      Boolean   @default(false) // Whether the workout is marked as favorite
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  totalVolume   Float     @default(0) // Total volume lifted in this workout
  
  // Status field for tracking workout state
  status        WorkoutStatus @default(PLANNED)

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  sets          Set[]
}

model Exercise {
  id          String   @id @default(uuid())
  name        String
  description String?
  muscles     String[]
  equipment   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Many-to-many relation to Set
  sets        Set[] @relation("SetExercises")
}

model Set {
  id          String   @id @default(uuid())
  workout     Workout  @relation(fields: [workoutId], references: [id])
  workoutId   String
  exercises   Exercise[] @relation("SetExercises")
  reps        Int
  weight      Float
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Calculate volume (weight * reps) for each set
  volume      Float?   @default(0) // Will be computed on save (weight * reps)
}

// Dashboard specific models
model UserStats {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  totalWorkouts     Int      @default(0)
  totalSets         Int      @default(0)
  totalExercises    Int      @default(0)
  totalVolume       Float    @default(0)
  totalTrainingHours Float   @default(0)
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  lastWorkoutAt     DateTime?
  activeWeeks       Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MonthlyStats {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  year              Int
  month             Int      // 1-12
  workoutsCount     Int      @default(0)
  exercisesCount    Int      @default(0)
  setsCount         Int      @default(0)
  volume            Float    @default(0)
  trainingHours     Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([userId, year, month])
}

// Enums
enum WorkoutStatus {
  PLANNED
  COMPLETED
  MISSED
  IN_PROGRESS
}
