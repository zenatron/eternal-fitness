generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  age       Int?
  gender    String?
  height    Float?
  weight    Float?
  useMetric Boolean  @default(false)
  points    Int      @default(0)

  // Relations
  workoutTemplates WorkoutTemplate[]
  workoutSessions  WorkoutSession[]
  userStats        UserStats?
  monthlyStats     MonthlyStats[]
  weightGoal       Float?
}

model WorkoutTemplate {
  id          String   @id @default(cuid())
  name        String
  favorite    Boolean  @default(false)
  totalVolume Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId   String
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions WorkoutSession[]
  sets     Set[]

  @@index([userId])
}

model WorkoutSession {
  id          String    @id @default(uuid())
  completedAt DateTime?
  scheduledAt DateTime?
  duration    Int?
  notes       String?
  totalVolume Float

  // Relations
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])
  workoutTemplateId String

  @@index([userId, completedAt])
}

model Exercise {
  id          String   @id @default(uuid())
  name        String
  description String?
  muscles     String[]
  equipment   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // back relation to Set
  sets        Set[]
}

model Set {
  id        String   @id @default(uuid())
  reps      Int
  weight    Float
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  volume    Float?   @default(0)

  workoutTemplateId String
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])

  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model UserStats {
  id                 String    @id @default(uuid())
  user               User      @relation(fields: [userId], references: [id])
  userId             String    @unique
  totalWorkouts      Int       @default(0)
  totalSets          Int       @default(0)
  totalExercises     Int       @default(0)
  totalVolume        Float     @default(0)
  totalTrainingHours Float     @default(0)
  currentStreak      Int       @default(0)
  longestStreak      Int       @default(0)
  lastWorkoutAt      DateTime?
  activeWeeks        Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model MonthlyStats {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  year          Int
  month         Int
  workoutsCount Int      @default(0)
  volume        Float    @default(0)
  trainingHours Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, year, month])
}
