generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  age       Int?
  gender    String?
  height    Float?
  weight    Float?
  useMetric Boolean  @default(false)
  points    Int      @default(0)

  // üéõÔ∏è DASHBOARD CUSTOMIZATION
  // JSON configuration for dashboard tiles and layout
  dashboardConfig Json? @db.JsonB

  // Relations
  workoutTemplates WorkoutTemplate[]
  workoutSessions  WorkoutSession[]
  userStats        UserStats?
  monthlyStats     MonthlyStats[]
  weightGoal       Float?

  // Index for dashboard config queries
  @@index([dashboardConfig], type: Gin)
}

model WorkoutTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  favorite    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  // üöÄ JSON-BASED WORKOUT SYSTEM
  workoutData      Json?    @db.JsonB  // Complete workout structure in JSON
  totalVolume      Float    @default(0)
  estimatedDuration Int     @default(0) // in minutes
  exerciseCount    Int      @default(0)
  difficulty       String   @default("intermediate") // beginner, intermediate, advanced
  workoutType      String   @default("strength") // strength, cardio, flexibility, sports
  tags             String[] @default([])

  // Relations
  userId   String
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions WorkoutSession[]

  // Indexes for performance
  @@index([userId])
  @@index([workoutType])
  @@index([difficulty])
  @@index([favorite])
  @@index([workoutData], type: Gin)
}

model WorkoutSession {
  id          String    @id @default(uuid())
  completedAt DateTime?
  scheduledAt DateTime?
  duration    Int?      // in minutes
  notes       String?
  totalVolume Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  // üöÄ JSON-BASED PERFORMANCE TRACKING
  performanceData  Json?    @db.JsonB  // Complete session performance data
  totalSets        Int      @default(0)
  totalExercises   Int      @default(0)
  personalRecords  Json?    @db.JsonB  // Array of PRs achieved in this session

  // Relations
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutTemplateId String
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])

  // Indexes for performance
  @@index([userId])
  @@index([completedAt])
  @@index([workoutTemplateId])
  @@index([performanceData], type: Gin)
}

model UserStats {
  id                 String    @id @default(uuid())
  user               User      @relation(fields: [userId], references: [id])
  userId             String    @unique
  totalWorkouts      Int       @default(0)
  totalSets          Int       @default(0)
  totalExercises     Int       @default(0)
  totalVolume        Float     @default(0)
  totalTrainingHours Float     @default(0)
  currentStreak      Int       @default(0)
  longestStreak      Int       @default(0)
  lastWorkoutAt      DateTime?
  activeWeeks        Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model MonthlyStats {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  year          Int
  month         Int
  workoutsCount Int      @default(0)
  volume        Float    @default(0)
  trainingHours Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, year, month])
}
