// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  age Int?
  gender String?
  height Float?
  weight Float?
  completedWorkouts Workout[]
  points Int @default(0)
}

model Workout {
  id            String    @id @default(uuid())
  name          String
  description   String?
  duration      Int?      // Total duration in minutes
  scheduledDate DateTime? // When the workout is planned for
  completed     Boolean   @default(false)
  completedAt   DateTime? // When the workout was completed
  notes         String?   // General workout notes
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  sets          Set[]
}

model Exercise {
  id          String   @id @default(uuid())
  name        String
  description String?
  muscles     String[]
  equipment   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Many-to-many relation to Set
  sets        Set[] @relation("SetExercises")
}

model Set {
  id          String   @id @default(uuid())
  workout     Workout  @relation(fields: [workoutId], references: [id])
  workoutId   String
  exercises   Exercise[] @relation("SetExercises")
  reps        Int
  weight      Float
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
